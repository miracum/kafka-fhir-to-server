name: CI

on:
  pull_request:
    branches: [master]
  push:
    branches: [master]
  release:
    types: [created]

permissions: read-all

env:
  IMAGE_NAME: ghcr.io/${{ github.repository }}

jobs:
  trivy:
    name: Trivy scan Code Base
    runs-on: ubuntu-22.04
    permissions:
      security-events: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3
        with:
          fetch-depth: 0

      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@41f05d9ecffa2ed3f1580af306000f734b733e54 # 0.11.2
        with:
          scan-type: "fs"
          ignore-unfixed: true
          format: "template"
          template: "@/contrib/sarif.tpl"
          output: "trivy-results.sarif"
          severity: "CRITICAL"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@46ed16ded91731b2df79a2893d3aea8e9f03b5c4 # v2.20.3
        with:
          sarif_file: "trivy-results.sarif"

  build:
    name: Build
    runs-on: ubuntu-22.04
    permissions:
      packages: write
    outputs:
      image-tags: ${{ steps.container_meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
      image-name: ${{ env.IMAGE_NAME }}
    steps:
      - name: Checkout code
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@2b82ce82d56a2a04d2637cd93a637ae1b359c0a7 # v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@2a1a44ac4aa01993040736bd95bb470da1a38365 # v2

      - name: Container meta
        id: container_meta
        uses: docker/metadata-action@818d4b7b91585d195f67373fd9cb0332e31a7175 # v4
        with:
          images: |
            ${{ env.IMAGE_NAME }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@465a07811f14bebb1938fbed4728c6a1ff8901fc # v2
        if: ${{ github.event_name != 'pull_request' }}
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get platforms to build
        id: platforms
        run: |
          if [ "$IS_PULL_REQUEST" == "true" ]; then
            echo "{platforms}={linux/amd64}" >> "$GITHUB_OUTPUT"
          else
            echo "{platforms}={linux/amd64}" >> "$GITHUB_OUTPUT"
          fi
        env:
          IS_PULL_REQUEST: ${{ github.event_name == 'pull_request' }}

      - name: Build and push
        id: build
        uses: docker/build-push-action@1104d471370f9806843c095c1db02b5a90c5f8b6 # v3
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.container_meta.outputs.tags }}
          labels: ${{ steps.container_meta.outputs.labels }}
          load: ${{ github.event_name == 'pull_request' }}
          platforms: ${{ steps.platforms.outputs.platforms }}

      - name: List images
        run: |
          docker image ls

      - name: Run E2E tests
        env:
          KAFKA_FHIR_TO_SERVER_IMAGE: "${{ fromJson(steps.container_meta.outputs.json).tags[0] }}"
        run: |
          docker compose -f compose.yml -f tests/e2e/compose.yml --project-directory=tests/e2e build
          docker compose -f compose.yml -f tests/e2e/compose.yml --project-directory=tests/e2e run test

      - name: Print E2E logs and shutdown
        if: always()
        env:
          KAFKA_FHIR_TO_SERVER_IMAGE: "${{ fromJson(steps.container_meta.outputs.json).tags[0] }}"
        run: |
          docker compose -f compose.yml -f tests/e2e/compose.yml logs
          docker compose -f compose.yml -f tests/e2e/compose.yml down --volumes --remove-orphans

  sign-images:
    name: sign images
    runs-on: ubuntu-22.04
    if: ${{ github.event_name != 'pull_request' }}
    needs:
      - build
    permissions:
      id-token: write
      packages: write
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@465a07811f14bebb1938fbed4728c6a1ff8901fc # v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Cosign
        uses: sigstore/cosign-installer@c85d0e205a72a294fe064f618a87dbac13084086 # v2.8.1

      - name: Sign image
        env:
          IMAGES: ${{ needs.build.outputs.image-tags }}
          DIGEST: ${{ needs.build.outputs.image-digest }}
          COSIGN_EXPERIMENTAL: "true"
        run: |
          while read -r image; do
            echo "Signing '$image' using keyless approach"
            cosign sign "$image@$DIGEST"
          done <<< "$IMAGES"

  container-provenance:
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    needs:
      - build
    permissions:
      actions: read # for detecting the Github Actions environment.
      id-token: write # for creating OIDC tokens for signing.
      packages: write # for uploading attestations.
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v1.7.0
    with:
      image: ${{ needs.build.outputs.image-name }}
      digest: ${{ needs.build.outputs.image-digest }}
      registry-username: ${{ github.actor }}
      # TODO(https://github.com/slsa-framework/slsa-github-generator/issues/492): Remove after GA release.
      compile-generator: true
    secrets:
      registry-password: ${{ secrets.GITHUB_TOKEN }}

  release:
    needs: build
    name: release
    runs-on: ubuntu-22.04
    if: ${{ github.event_name != 'pull_request' }}
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3
        with:
          fetch-depth: 0

      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@3b88c82b34098e8b51e401c1082c9170b0a3ec3c # tag=v3
        with:
          extra_plugins: |
            conventional-changelog-conventionalcommits@5.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.MIRACUM_BOT_SEMANTIC_RELEASE_TOKEN }}
