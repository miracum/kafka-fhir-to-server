app:
  version: 2.1.5

spring:
  application:
    name: fhir-to-server
  profiles:
    active: dev
  kafka:
    bootstrapServers: ${BOOTSTRAP_SERVERS}
    security.protocol: ${SECURITY_PROTOCOL:PLAINTEXT}
    ssl:
      trust-store-type: PKCS12
      trust-store-location: file://${SSL_TRUST_STORE:/opt/kafka-certs/ca.p12}
      trust-store-password: ${SSL_TRUST_STORE_PASSWORD}
      key-store-type: PKCS12
      key-store-location: file://${SSL_KEY_STORE_FILE:/opt/kafka-certs/user.p12}
      key-store-password: ${SSL_KEY_STORE_PASSWORD}
    consumer:
      properties:
        allow.auto.create.topics: ${AUTO_CREATE_TOPICS:false}
        fetch.max.wait.ms: ${FETCH_MAX_WAIT_MS:10000}
        retry.backoff.ms: ${RETRY_BACKOFF_MS:5000}
        max.poll.records: ${MAX_POLL_RECORDS:500}
        max.poll.interval.ms: ${MAX_POLL_INTERVAL_MS:300000}
        max.request.size: ${MAX_REQUEST_SIZE:1048576}
        request.timeout.ms: ${REQUEST_TIMEOUT_MS:900000}
  cloud:
    function:
      definition: sink
    stream:
      bindings:
        sink-in-0:
          consumer:
            concurrency: ${CONSUMER_CONCURRENCY:1}
            # this can't be set to `false` unless we change the signature of the
            # `sink` method since it currently receives a List<> instead of a single
            # record.
            batch-mode: true
            use-native-decoding: true
          destination: ${TOPIC:fhir-msg}
          group: ${GROUP_ID:fhir-to-server}
      kafka:
        default:
          consumer:
            enableDlq: true
            dlqProducerProperties:
              configuration:
                key.serializer: org.springframework.kafka.support.serializer.JsonSerializer
                value.serializer: org.miracum.kafka.serializers.KafkaFhirSerializer
        bindings:
          sink-in-0:
            consumer:
              configuration:
                value.deserializer: org.miracum.kafka.serializers.KafkaFhirDeserializer
  main:
    banner-mode: off

management:
  endpoint:
    health:
      show-details: always
      probes:
        enabled: true
  endpoints:
    web:
      exposure:
        include: "*"
  health:
    livenessstate:
      enabled: true
    readinessstate:
      enabled: true

fhir:
  filter:
    expression: ""
  override-bundle-type-with: ""
  url: ""
  auth:
    basic:
      enabled: false
      username: ""
      password: ""
  http-timeout-seconds: 60
  merge-batches-into-single-bundle:
    enabled: false
    entry-uniqueness-fhirpath-expression: "resource.id.toString()"
    bundle-max-size: null

s3:
  enabled: false
  endpoint-url: ""
  access-key: ""
  secret-key: ""
  bucket-name: "fhir"
  object-name-prefix: ""

logging:
  pattern:
    console: "%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:%5p}) %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m %X %n${LOG_EXCEPTION_CONVERSION_WORD:%wEx}"
