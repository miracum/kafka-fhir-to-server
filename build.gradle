plugins {
    id 'org.springframework.boot' version '3.0.1'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'java'
    id 'jacoco'
    id 'com.diffplug.spotless' version '6.12.1'
    // id 'org.graalvm.buildtools.native' version '0.9.18'
}

group = 'org.miracum.streams'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', '2022.0.0')
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    implementation 'org.springframework.cloud:spring-cloud-stream'
    implementation 'org.springframework.cloud:spring-cloud-stream-binder-kafka'
    implementation 'org.springframework.kafka:spring-kafka'

    implementation 'org.apache.kafka:kafka-streams'

    implementation 'io.micrometer:micrometer-registry-prometheus:1.10.2'
    implementation 'io.micrometer:micrometer-core:1.10.2'

    implementation 'org.miracum:kafka-fhir-serializer:1.0.3'

    implementation 'net.logstash.logback:logstash-logback-encoder:7.2'

    implementation 'ca.uhn.hapi.fhir:hapi-fhir-base:6.2.2'
    implementation 'ca.uhn.hapi.fhir:hapi-fhir-client:6.2.2'
    implementation 'ca.uhn.hapi.fhir:hapi-fhir-structures-r4:6.2.2'
    implementation 'ca.uhn.hapi.fhir:hapi-fhir-client-okhttp:6.2.2'

    implementation 'com.github.ben-manes.caffeine:caffeine:3.1.2'

    implementation 'org.fhir:ucum:1.0.3'

    implementation 'io.opentracing.contrib:opentracing-spring-jaeger-cloud-starter:3.3.1'
    implementation 'io.opentracing.contrib:opentracing-okhttp3:3.0.0'
    implementation 'io.opentracing.contrib:opentracing-kafka-spring:0.1.15'

    implementation 'io.jaegertracing:jaeger-client:1.8.1'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

jar {
    enabled = false
}

tasks.named('test') {
  useJUnitPlatform()
}

jacocoTestReport {
    reports {
        html.required = true
        xml.required = false
        csv.required = true
    }
}

spotless {
    java {
        importOrder()
        removeUnusedImports()
        googleJavaFormat()
    }
}
